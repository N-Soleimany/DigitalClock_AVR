
AVRASM ver. 2.1.30  C:\Users\nivan\OneDrive\Desktop\DigitalClock_AVR\Debug\List\digital_clock.asm Sat Aug 17 16:17:46 2024

C:\Users\nivan\OneDrive\Desktop\DigitalClock_AVR\Debug\List\digital_clock.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\nivan\OneDrive\Desktop\DigitalClock_AVR\Debug\List\digital_clock.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\nivan\OneDrive\Desktop\DigitalClock_AVR\Debug\List\digital_clock.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hour=R5
                 	.DEF _minute=R4
                 	.DEF _digitSelect=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0038 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
00002c f9c0
00002d b0a4
00002e 9299
00002f f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
000030 9080      	.DB  0x80,0x90
                 
                 __GLOBAL_INI_TBL:
000031 0004      	.DW  0x04
000032 0004      	.DW  0x04
000033 0054      	.DW  __REG_VARS*2
                 
000034 000a      	.DW  0x0A
000035 0164      	.DW  _sevenSegNum
000036 0058      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000037 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000038 94f8      	CLI
000039 27ee      	CLR  R30
00003a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003b e0f1      	LDI  R31,1
00003c bffb      	OUT  GICR,R31
00003d bfeb      	OUT  GICR,R30
00003e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003f e08d      	LDI  R24,(14-2)+1
000040 e0a2      	LDI  R26,2
000041 27bb      	CLR  R27
                 __CLEAR_REG:
000042 93ed      	ST   X+,R30
000043 958a      	DEC  R24
000044 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000045 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000046 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000047 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000048 93ed      	ST   X+,R30
000049 9701      	SBIW R24,1
00004a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004b e6e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004d 9185      	LPM  R24,Z+
00004e 9195      	LPM  R25,Z+
00004f 9700      	SBIW R24,0
000050 f061      	BREQ __GLOBAL_INI_END
000051 91a5      	LPM  R26,Z+
000052 91b5      	LPM  R27,Z+
000053 9005      	LPM  R0,Z+
000054 9015      	LPM  R1,Z+
000055 01bf      	MOVW R22,R30
000056 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000057 9005      	LPM  R0,Z+
000058 920d      	ST   X+,R0
000059 9701      	SBIW R24,1
00005a f7e1      	BRNE __GLOBAL_INI_LOOP
00005b 01fb      	MOVW R30,R22
00005c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005e bfed      	OUT  SPL,R30
00005f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000060 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000061 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000062 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000063 940c 0065 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define up    (PINB & (1<<0))
                 ;#define down  (PINB & (1<<1))
                 ;#define min   (PINB & (1<<2))
                 ;#define hr    (PINB & (1<<3))
                 ;#define enter (PINB & (1<<4))
                 ;
                 ;signed char hour = 0;
                 ;signed char minute = 0;
                 ;unsigned char digitSelect = 0;
                 ;unsigned char sevenSegDigit[4] = {0};
                 ;unsigned char sevenSegNum[10] =
                 ;{
                 ;    0xC0, 0xF9, 0xA4, 0xB0, 0x99,
                 ;    0x92, 0x82, 0xF8, 0x80, 0x90
                 ;};
                 
                 	.DSEG
                 ;
                 ;
                 ;void digitselect_def (void);
                 ;void GPI (void);
                 ;void minute_def (void);
                 ;void hour_def (void);
                 ;void setclockhour (void);
                 ;void setclockmin (void);
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 001F {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0020     unsigned int delayCnt = 0;
                 ; 0000 0021 
                 ; 0000 0022 
                 ; 0000 0023     GPI () ;
                 ;	delayCnt -> R16,R17
                +
000065 e000     +LDI R16 , LOW ( 0 )
000066 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000067 d082      	RCALL _GPI
                 ; 0000 0024     minute_def();
000068 d08d      	RCALL _minute_def
                 ; 0000 0025 
                 ; 0000 0026     while (1)
                 _0x4:
                 ; 0000 0027     {
                 ; 0000 0028 
                 ; 0000 0029         digitselect_def ();
000069 d068      	RCALL _digitselect_def
                 ; 0000 002A 
                 ; 0000 002B 
                 ; 0000 002C         if (delayCnt >= 100)
                +
00006a 3604     +CPI R16 , LOW ( 100 )
00006b e0e0     +LDI R30 , HIGH ( 100 )
00006c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,100
00006d f020      	BRLO _0x7
                 ; 0000 002D         {
                 ; 0000 002E             delayCnt = 0;
                +
00006e e000     +LDI R16 , LOW ( 0 )
00006f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 002F             minute++;
000070 9443      	INC  R4
                 ; 0000 0030             minute_def();
000071 d084      	RCALL _minute_def
                 ; 0000 0031         }
                 ; 0000 0032 
                 ; 0000 0033         hour_def ();
                 _0x7:
000072 d0a9      	RCALL _hour_def
                 ; 0000 0034 
                 ; 0000 0035 
                 ; 0000 0036 
                 ; 0000 0037         delay_ms(5);
000073 e0a5      	LDI  R26,LOW(5)
000074 e0b0      	LDI  R27,0
000075 940e 0146 	CALL _delay_ms
                 ; 0000 0038         delayCnt++;
                +
000077 5f0f     +SUBI R16 , LOW ( - 1 )
000078 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0039 
                 ; 0000 003A         if(min ==0)
000079 9bb2      	SBIS 0x16,2
                 ; 0000 003B         {
                 ; 0000 003C             setclockmin();
00007a d004      	RCALL _setclockmin
                 ; 0000 003D         }
                 ; 0000 003E         if(hr ==0)
00007b 9bb3      	SBIS 0x16,3
                 ; 0000 003F         {
                 ; 0000 0040 
                 ; 0000 0041             setclockhour();
00007c d02a      	RCALL _setclockhour
                 ; 0000 0042 
                 ; 0000 0043         }
                 ; 0000 0044 
                 ; 0000 0045 
                 ; 0000 0046      }
00007d cfeb      	RJMP _0x4
                 ; 0000 0047 }
                 _0xA:
00007e cfff      	RJMP _0xA
                 ; .FEND
                 ;
                 ;
                 ;void setclockmin (void)
                 ; 0000 004B {
                 _setclockmin:
                 ; .FSTART _setclockmin
                 ; 0000 004C     unsigned char flagminup =0;
                 ; 0000 004D     unsigned char flagmindown =0;
                 ; 0000 004E     while(enter !=0)
00007f 931a      	ST   -Y,R17
000080 930a      	ST   -Y,R16
                 ;	flagminup -> R17
                 ;	flagmindown -> R16
000081 e010      	LDI  R17,0
000082 e000      	LDI  R16,0
                 _0xB:
000083 9bb4      	SBIS 0x16,4
000084 c021      	RJMP _0xD
                 ; 0000 004F     {
                 ; 0000 0050           minute_def();
000085 d070      	RCALL _minute_def
                 ; 0000 0051           digitselect_def();
000086 d04b      	RCALL _digitselect_def
                 ; 0000 0052           GPI();
000087 d062      	RCALL _GPI
                 ; 0000 0053           if(up ==0 && flagminup ==0)
000088 99b0      	SBIC 0x16,0
000089 c002      	RJMP _0xF
00008a 3010      	CPI  R17,0
00008b f009      	BREQ _0x10
                 _0xF:
00008c c006      	RJMP _0xE
                 _0x10:
                 ; 0000 0054           {
                 ; 0000 0055                minute++;
00008d 9443      	INC  R4
                 ; 0000 0056                if(minute >=60){minute =0;}
00008e e3ec      	LDI  R30,LOW(60)
00008f 164e      	CP   R4,R30
000090 f00c      	BRLT _0x11
000091 2444      	CLR  R4
                 ; 0000 0057                flagminup =1;
                 _0x11:
000092 e011      	LDI  R17,LOW(1)
                 ; 0000 0058           }
                 ; 0000 0059           if(up !=0){flagminup =0;}
                 _0xE:
000093 99b0      	SBIC 0x16,0
000094 e010      	LDI  R17,LOW(0)
                 ; 0000 005A           if(down ==0 && flagmindown ==0)
000095 99b1      	SBIC 0x16,1
000096 c002      	RJMP _0x14
000097 3000      	CPI  R16,0
000098 f009      	BREQ _0x15
                 _0x14:
000099 c007      	RJMP _0x13
                 _0x15:
                 ; 0000 005B           {
                 ; 0000 005C                minute--;
00009a 944a      	DEC  R4
                 ; 0000 005D                if(minute <0){minute =59;}
00009b e0e0      	LDI  R30,LOW(0)
00009c 164e      	CP   R4,R30
00009d f414      	BRGE _0x16
00009e e3eb      	LDI  R30,LOW(59)
00009f 2e4e      	MOV  R4,R30
                 ; 0000 005E                flagmindown =1;
                 _0x16:
0000a0 e001      	LDI  R16,LOW(1)
                 ; 0000 005F           }
                 ; 0000 0060           if(down !=0){flagmindown =0;}
                 _0x13:
0000a1 99b1      	SBIC 0x16,1
0000a2 e000      	LDI  R16,LOW(0)
                 ; 0000 0061           if(hr ==0)
0000a3 9bb3      	SBIS 0x16,3
                 ; 0000 0062              {
                 ; 0000 0063                  setclockhour();
0000a4 d002      	RCALL _setclockhour
                 ; 0000 0064              }
                 ; 0000 0065      }
0000a5 cfdd      	RJMP _0xB
                 _0xD:
                 ; 0000 0066 
                 ; 0000 0067 }
0000a6 c028      	RJMP _0x2000002
                 ; .FEND
                 ;
                 ;
                 ;void setclockhour (void)
                 ; 0000 006B {
                 _setclockhour:
                 ; .FSTART _setclockhour
                 ; 0000 006C      unsigned char flaghourdown =0;
                 ; 0000 006D      unsigned char flaghourup =0;
                 ; 0000 006E      while(enter !=0)
0000a7 931a      	ST   -Y,R17
0000a8 930a      	ST   -Y,R16
                 ;	flaghourdown -> R17
                 ;	flaghourup -> R16
0000a9 e010      	LDI  R17,0
0000aa e000      	LDI  R16,0
                 _0x19:
0000ab 9bb4      	SBIS 0x16,4
0000ac c022      	RJMP _0x1B
                 ; 0000 006F      {
                 ; 0000 0070           minute_def();
0000ad d048      	RCALL _minute_def
                 ; 0000 0071           digitselect_def();
0000ae d023      	RCALL _digitselect_def
                 ; 0000 0072           hour_def ();
0000af d06c      	RCALL _hour_def
                 ; 0000 0073           GPI();
0000b0 d039      	RCALL _GPI
                 ; 0000 0074           if(up ==0 && flaghourup ==0)
0000b1 99b0      	SBIC 0x16,0
0000b2 c002      	RJMP _0x1D
0000b3 3000      	CPI  R16,0
0000b4 f009      	BREQ _0x1E
                 _0x1D:
0000b5 c006      	RJMP _0x1C
                 _0x1E:
                 ; 0000 0075           {
                 ; 0000 0076                hour++;
0000b6 9453      	INC  R5
                 ; 0000 0077                if(hour >24){hour =0;}
0000b7 e1e8      	LDI  R30,LOW(24)
0000b8 15e5      	CP   R30,R5
0000b9 f40c      	BRGE _0x1F
0000ba 2455      	CLR  R5
                 ; 0000 0078                flaghourup =1;
                 _0x1F:
0000bb e001      	LDI  R16,LOW(1)
                 ; 0000 0079           }
                 ; 0000 007A           if(up !=0){flaghourup =0;}
                 _0x1C:
0000bc 99b0      	SBIC 0x16,0
0000bd e000      	LDI  R16,LOW(0)
                 ; 0000 007B           if(down ==0 && flaghourdown ==0)
0000be 99b1      	SBIC 0x16,1
0000bf c002      	RJMP _0x22
0000c0 3010      	CPI  R17,0
0000c1 f009      	BREQ _0x23
                 _0x22:
0000c2 c007      	RJMP _0x21
                 _0x23:
                 ; 0000 007C           {
                 ; 0000 007D                hour--;
0000c3 945a      	DEC  R5
                 ; 0000 007E                if(hour <0){hour =24;}
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 165e      	CP   R5,R30
0000c6 f414      	BRGE _0x24
0000c7 e1e8      	LDI  R30,LOW(24)
0000c8 2e5e      	MOV  R5,R30
                 ; 0000 007F                flaghourdown =1;
                 _0x24:
0000c9 e011      	LDI  R17,LOW(1)
                 ; 0000 0080           }
                 ; 0000 0081           if(down !=0){flaghourdown =0;}
                 _0x21:
0000ca 99b1      	SBIC 0x16,1
0000cb e010      	LDI  R17,LOW(0)
                 ; 0000 0082           if(min ==0)
0000cc 9bb2      	SBIS 0x16,2
                 ; 0000 0083           {
                 ; 0000 0084           setclockmin();
0000cd dfb1      	RCALL _setclockmin
                 ; 0000 0085           }
                 ; 0000 0086      }
0000ce cfdc      	RJMP _0x19
                 _0x1B:
                 ; 0000 0087 
                 ; 0000 0088 }
                 _0x2000002:
0000cf 9109      	LD   R16,Y+
0000d0 9119      	LD   R17,Y+
0000d1 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void digitselect_def (void)
                 ; 0000 008D {
                 _digitselect_def:
                 ; .FSTART _digitselect_def
                 ; 0000 008E 
                 ; 0000 008F         PORTD = 1 << digitSelect;
0000d2 2de7      	MOV  R30,R7
0000d3 e0a1      	LDI  R26,LOW(1)
0000d4 940e 0150 	CALL __LSLB12
0000d6 bbe2      	OUT  0x12,R30
                 ; 0000 0090         PORTC = sevenSegDigit[digitSelect];
0000d7 2de7      	MOV  R30,R7
0000d8 e0f0      	LDI  R31,0
0000d9 5ae0      	SUBI R30,LOW(-_sevenSegDigit)
0000da 4ffe      	SBCI R31,HIGH(-_sevenSegDigit)
0000db 81e0      	LD   R30,Z
0000dc bbe5      	OUT  0x15,R30
                 ; 0000 0091         if (++digitSelect >= 4)
0000dd 9473      	INC  R7
0000de e0e4      	LDI  R30,LOW(4)
0000df 167e      	CP   R7,R30
0000e0 f008      	BRLO _0x27
                 ; 0000 0092         {
                 ; 0000 0093             digitSelect = 0;
0000e1 2477      	CLR  R7
                 ; 0000 0094         }
                 ; 0000 0095 
                 ; 0000 0096             if (digitSelect == 3)
                 _0x27:
0000e2 e0e3      	LDI  R30,LOW(3)
0000e3 15e7      	CP   R30,R7
0000e4 f421      	BRNE _0x28
                 ; 0000 0097         {
                 ; 0000 0098             PORTC ^= (1 << 7);
0000e5 b3e5      	IN   R30,0x15
0000e6 e8a0      	LDI  R26,LOW(128)
0000e7 27ea      	EOR  R30,R26
0000e8 bbe5      	OUT  0x15,R30
                 ; 0000 0099         }
                 ; 0000 009A 
                 ; 0000 009B 
                 ; 0000 009C 
                 ; 0000 009D }
                 _0x28:
0000e9 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void GPI (void)
                 ; 0000 00A1 {
                 _GPI:
                 ; .FSTART _GPI
                 ; 0000 00A2     DDRC = 0xFF;
0000ea efef      	LDI  R30,LOW(255)
0000eb bbe4      	OUT  0x14,R30
                 ; 0000 00A3     DDRD |= ((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3));
0000ec b3e1      	IN   R30,0x11
0000ed 60ef      	ORI  R30,LOW(0xF)
0000ee bbe1      	OUT  0x11,R30
                 ; 0000 00A4     DDRB &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1<<4));
0000ef b3e7      	IN   R30,0x17
0000f0 7ee8      	ANDI R30,LOW(0xE8)
0000f1 bbe7      	OUT  0x17,R30
                 ; 0000 00A5 
                 ; 0000 00A6     PORTB |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)|(1<<4);
0000f2 b3e8      	IN   R30,0x18
0000f3 61ef      	ORI  R30,LOW(0x1F)
0000f4 bbe8      	OUT  0x18,R30
                 ; 0000 00A7 }
0000f5 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void minute_def (void)
                 ; 0000 00AB {
                 _minute_def:
                 ; .FSTART _minute_def
                 ; 0000 00AC     unsigned int temp = 0;
                 ; 0000 00AD     unsigned char i = 0;
                 ; 0000 00AE 
                 ; 0000 00AF     if (minute == 60)
0000f6 940e 016e 	CALL __SAVELOCR4
                 ;	temp -> R16,R17
                 ;	i -> R19
                +
0000f8 e000     +LDI R16 , LOW ( 0 )
0000f9 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0000fa e030      	LDI  R19,0
0000fb e3ec      	LDI  R30,LOW(60)
0000fc 15e4      	CP   R30,R4
0000fd f431      	BRNE _0x29
                 ; 0000 00B0     {
                 ; 0000 00B1             minute = 0;
0000fe 2444      	CLR  R4
                 ; 0000 00B2             hour++;
0000ff 9453      	INC  R5
                 ; 0000 00B3             if (hour >= 24)
000100 e1e8      	LDI  R30,LOW(24)
000101 165e      	CP   R5,R30
000102 f00c      	BRLT _0x2A
                 ; 0000 00B4             {
                 ; 0000 00B5                 hour = 0;
000103 2455      	CLR  R5
                 ; 0000 00B6             }
                 ; 0000 00B7     }
                 _0x2A:
                 ; 0000 00B8     temp = minute;
                 _0x29:
000104 2de4      	MOV  R30,R4
000105 e0f0      	LDI  R31,0
000106 fde7      	SBRC R30,7
000107 efff      	SER  R31
000108 018f      	MOVW R16,R30
                 ; 0000 00B9     for (i = 0; i < 2; i++)
000109 e030      	LDI  R19,LOW(0)
                 _0x2C:
00010a 3032      	CPI  R19,2
00010b f478      	BRSH _0x2D
                 ; 0000 00BA     {
                 ; 0000 00BB             sevenSegDigit[i] = sevenSegNum[temp % 10];
00010c 2fe3      	MOV  R30,R19
00010d e0f0      	LDI  R31,0
00010e 5ae0      	SUBI R30,LOW(-_sevenSegDigit)
00010f 4ffe      	SBCI R31,HIGH(-_sevenSegDigit)
000110 01bf      	MOVW R22,R30
000111 01d8      	MOVW R26,R16
000112 d029      	RCALL SUBOPT_0x0
                 ; 0000 00BC             temp /= 10;
000113 01d8      	MOVW R26,R16
000114 e0ea      	LDI  R30,LOW(10)
000115 e0f0      	LDI  R31,HIGH(10)
000116 940e 0158 	CALL __DIVW21U
000118 018f      	MOVW R16,R30
                 ; 0000 00BD     }
000119 5f3f      	SUBI R19,-1
00011a cfef      	RJMP _0x2C
                 _0x2D:
                 ; 0000 00BE 
                 ; 0000 00BF }
00011b c01c      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;void hour_def (void)
                 ; 0000 00C2 {
                 _hour_def:
                 ; .FSTART _hour_def
                 ; 0000 00C3         unsigned char s = 0;
                 ; 0000 00C4         unsigned int temp2 = 0;
                 ; 0000 00C5         temp2 = hour;
00011c 940e 016e 	CALL __SAVELOCR4
                 ;	s -> R17
                 ;	temp2 -> R18,R19
00011e e010      	LDI  R17,0
                +
00011f e020     +LDI R18 , LOW ( 0 )
000120 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000121 2de5      	MOV  R30,R5
000122 e0f0      	LDI  R31,0
000123 fde7      	SBRC R30,7
000124 efff      	SER  R31
000125 019f      	MOVW R18,R30
                 ; 0000 00C6         for (s = 2; s < 4; s++)
000126 e012      	LDI  R17,LOW(2)
                 _0x2F:
000127 3014      	CPI  R17,4
000128 f478      	BRSH _0x30
                 ; 0000 00C7         {
                 ; 0000 00C8             sevenSegDigit[s] = sevenSegNum[temp2 % 10];
000129 2fe1      	MOV  R30,R17
00012a e0f0      	LDI  R31,0
00012b 5ae0      	SUBI R30,LOW(-_sevenSegDigit)
00012c 4ffe      	SBCI R31,HIGH(-_sevenSegDigit)
00012d 01bf      	MOVW R22,R30
00012e 01d9      	MOVW R26,R18
00012f d00c      	RCALL SUBOPT_0x0
                 ; 0000 00C9             temp2 /= 10;
000130 01d9      	MOVW R26,R18
000131 e0ea      	LDI  R30,LOW(10)
000132 e0f0      	LDI  R31,HIGH(10)
000133 940e 0158 	CALL __DIVW21U
000135 019f      	MOVW R18,R30
                 ; 0000 00CA         }
000136 5f1f      	SUBI R17,-1
000137 cfef      	RJMP _0x2F
                 _0x30:
                 ; 0000 00CB }
                 _0x2000001:
000138 940e 0173 	CALL __LOADLOCR4
00013a 9624      	ADIW R28,4
00013b 9508      	RET
                 ; .FEND
                 ;
                 
                 	.DSEG
                 _sevenSegDigit:
000160           	.BYTE 0x4
                 _sevenSegNum:
000164           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
00013c e0ea      	LDI  R30,LOW(10)
00013d e0f0      	LDI  R31,HIGH(10)
00013e 940e 016b 	CALL __MODW21U
000140 59ec      	SUBI R30,LOW(-_sevenSegNum)
000141 4ffe      	SBCI R31,HIGH(-_sevenSegNum)
000142 81e0      	LD   R30,Z
000143 01db      	MOVW R26,R22
000144 93ec      	ST   X,R30
000145 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000146 9610      	adiw r26,0
000147 f039      	breq __delay_ms1
                 __delay_ms0:
000148 95a8      	wdr
                +
000149 ef8a     +LDI R24 , LOW ( 0xFA )
00014a e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00014b 9701     +SBIW R24 , 1
00014c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00014d 9711      	sbiw r26,1
00014e f7c9      	brne __delay_ms0
                 __delay_ms1:
00014f 9508      	ret
                 
                 __LSLB12:
000150 23ee      	TST  R30
000151 2e0e      	MOV  R0,R30
000152 2fea      	MOV  R30,R26
000153 f019      	BREQ __LSLB12R
                 __LSLB12L:
000154 0fee      	LSL  R30
000155 940a      	DEC  R0
000156 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000157 9508      	RET
                 
                 __DIVW21U:
000158 2400      	CLR  R0
000159 2411      	CLR  R1
00015a e190      	LDI  R25,16
                 __DIVW21U1:
00015b 0faa      	LSL  R26
00015c 1fbb      	ROL  R27
00015d 1c00      	ROL  R0
00015e 1c11      	ROL  R1
00015f 1a0e      	SUB  R0,R30
000160 0a1f      	SBC  R1,R31
000161 f418      	BRCC __DIVW21U2
000162 0e0e      	ADD  R0,R30
000163 1e1f      	ADC  R1,R31
000164 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000165 60a1      	SBR  R26,1
                 __DIVW21U3:
000166 959a      	DEC  R25
000167 f799      	BRNE __DIVW21U1
000168 01fd      	MOVW R30,R26
000169 01d0      	MOVW R26,R0
00016a 9508      	RET
                 
                 __MODW21U:
00016b dfec      	RCALL __DIVW21U
00016c 01fd      	MOVW R30,R26
00016d 9508      	RET
                 
                 __SAVELOCR4:
00016e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00016f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000170 931a      	ST   -Y,R17
000171 930a      	ST   -Y,R16
000172 9508      	RET
                 
                 __LOADLOCR4:
000173 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000174 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000175 8119      	LDD  R17,Y+1
000176 8108      	LD   R16,Y
000177 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   5 r2 :   0 r3 :   0 r4 :  10 r5 :  10 r6 :   0 r7 :   6 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  22 r17:  23 r18:   7 r19:   8 r20:   0 r21:   0 r22:   5 r23:   0 
r24:   9 r25:   5 r26:  20 r27:   4 r28:   2 r29:   1 r30:  84 r31:  19 
x  :   4 y  :  14 z  :   9 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   2 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   7 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   2 brmi  :   0 brne  :   9 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   8 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   8 cpc   :   1 cpi   :   7 cpse  :   0 dec   :   5 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   5 jmp   :  22 ld    :   5 ldd   :   3 ldi   :  66 
lds   :   0 lpm   :   7 lsl   :   2 lsr   :   0 mov   :  10 movw  :  17 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   2 out   :  13 pop   :   0 push  :   0 rcall :  19 ret   :  11 
reti  :   0 rjmp  :  20 rol   :   3 ror   :   0 sbc   :   1 sbci  :   5 
sbi   :   0 sbic  :   8 sbis  :   6 sbiw  :   5 sbr   :   1 sbrc  :   2 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   2 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  12 std   :   0 sts   :   0 sub   :   1 subi  :   7 swap  :   0 
tst   :   1 wdr   :   1 
Instructions used: 48 out of 116 (41.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002f0    724     28    752   16384   4.6%
[.dseg] 0x000060 0x00016e      0     14     14    1024   1.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
