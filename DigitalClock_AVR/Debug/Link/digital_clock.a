;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define up    (PINB & (1<<0))
;#define down  (PINB & (1<<1))
;#define min   (PINB & (1<<2))
;#define hr    (PINB & (1<<3))
;#define enter (PINB & (1<<4))
;
;signed char hour = 0;
;signed char minute = 0;
;unsigned char digitSelect = 0;
;unsigned char sevenSegDigit[4] = {0};
;unsigned char sevenSegNum[10] =
;{
;    0xC0, 0xF9, 0xA4, 0xB0, 0x99,
;    0x92, 0x82, 0xF8, 0x80, 0x90
;};

	.DSEG
;
;
;void digitselect_def (void);
;void GPI (void);
;void minute_def (void);
;void hour_def (void);
;void setclockhour (void);
;void setclockmin (void);
;
;
;
;void main(void)
; 0000 001F {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0020     unsigned int delayCnt = 0;
; 0000 0021 
; 0000 0022 
; 0000 0023     GPI () ;
;	delayCnt -> R16,R17
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0024     minute_def();
;PCODE: $00000011 VOL: 0
; 0000 0025 
; 0000 0026     while (1)
;PCODE: $00000012 VOL: 0
; 0000 0027     {
; 0000 0028 
; 0000 0029         digitselect_def ();
;PCODE: $00000013 VOL: 0
; 0000 002A 
; 0000 002B 
; 0000 002C         if (delayCnt >= 100)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002D         {
; 0000 002E             delayCnt = 0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002F             minute++;
;PCODE: $00000019 VOL: 0
; 0000 0030             minute_def();
;PCODE: $0000001A VOL: 0
; 0000 0031         }
; 0000 0032 
; 0000 0033         hour_def ();
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0034 
; 0000 0035 
; 0000 0036 
; 0000 0037         delay_ms(5);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0038         delayCnt++;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0039 
; 0000 003A         if(min ==0)
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003B         {
; 0000 003C             setclockmin();
;PCODE: $00000025 VOL: 0
; 0000 003D         }
; 0000 003E         if(hr ==0)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003F         {
; 0000 0040 
; 0000 0041             setclockhour();
;PCODE: $0000002A VOL: 0
; 0000 0042 
; 0000 0043         }
; 0000 0044 
; 0000 0045 
; 0000 0046      }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0047 }
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;
;void setclockmin (void)
; 0000 004B {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 004C     unsigned char flagminup =0;
; 0000 004D     unsigned char flagmindown =0;
; 0000 004E     while(enter !=0)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;	flagminup -> R17
;	flagmindown -> R16
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004F     {
; 0000 0050           minute_def();
;PCODE: $0000003D VOL: 0
; 0000 0051           digitselect_def();
;PCODE: $0000003E VOL: 0
; 0000 0052           GPI();
;PCODE: $0000003F VOL: 0
; 0000 0053           if(up ==0 && flagminup ==0)
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0054           {
; 0000 0055                minute++;
;PCODE: $00000049 VOL: 0
; 0000 0056                if(minute >=60){minute =0;}
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0057                flagminup =1;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0058           }
; 0000 0059           if(up !=0){flagminup =0;}
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 005A           if(down ==0 && flagmindown ==0)
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 005B           {
; 0000 005C                minute--;
;PCODE: $00000061 VOL: 0
; 0000 005D                if(minute <0){minute =59;}
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 005E                flagmindown =1;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 005F           }
; 0000 0060           if(down !=0){flagmindown =0;}
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0061           if(hr ==0)
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0062              {
; 0000 0063                  setclockhour();
;PCODE: $00000074 VOL: 0
; 0000 0064              }
; 0000 0065      }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0066 
; 0000 0067 }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;
;void setclockhour (void)
; 0000 006B {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 006C      unsigned char flaghourdown =0;
; 0000 006D      unsigned char flaghourup =0;
; 0000 006E      while(enter !=0)
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;	flaghourdown -> R17
;	flaghourup -> R16
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 006F      {
; 0000 0070           minute_def();
;PCODE: $00000087 VOL: 0
; 0000 0071           digitselect_def();
;PCODE: $00000088 VOL: 0
; 0000 0072           hour_def ();
;PCODE: $00000089 VOL: 0
; 0000 0073           GPI();
;PCODE: $0000008A VOL: 0
; 0000 0074           if(up ==0 && flaghourup ==0)
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0075           {
; 0000 0076                hour++;
;PCODE: $00000094 VOL: 0
; 0000 0077                if(hour >24){hour =0;}
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0078                flaghourup =1;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0079           }
; 0000 007A           if(up !=0){flaghourup =0;}
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 007B           if(down ==0 && flaghourdown ==0)
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 007C           {
; 0000 007D                hour--;
;PCODE: $000000AC VOL: 0
; 0000 007E                if(hour <0){hour =24;}
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 007F                flaghourdown =1;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0080           }
; 0000 0081           if(down !=0){flaghourdown =0;}
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0082           if(min ==0)
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0083           {
; 0000 0084           setclockmin();
;PCODE: $000000BF VOL: 0
; 0000 0085           }
; 0000 0086      }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0087 
; 0000 0088 }
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;
;
;
;void digitselect_def (void)
; 0000 008D {
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 008E 
; 0000 008F         PORTD = 1 << digitSelect;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0090         PORTC = sevenSegDigit[digitSelect];
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0091         if (++digitSelect >= 4)
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0092         {
; 0000 0093             digitSelect = 0;
;PCODE: $000000D5 VOL: 0
; 0000 0094         }
; 0000 0095 
; 0000 0096             if (digitSelect == 3)
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0097         {
; 0000 0098             PORTC ^= (1 << 7);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0099         }
; 0000 009A 
; 0000 009B 
; 0000 009C 
; 0000 009D }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;
;
;void GPI (void)
; 0000 00A1 {
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00A2     DDRC = 0xFF;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00A3     DDRD |= ((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3));
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00A4     DDRB &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1<<4));
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00A5 
; 0000 00A6     PORTB |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)|(1<<4);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00A7 }
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;
;
;void minute_def (void)
; 0000 00AB {
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00AC     unsigned int temp = 0;
; 0000 00AD     unsigned char i = 0;
; 0000 00AE 
; 0000 00AF     if (minute == 60)
;PCODE: $000000F2 VOL: 0
;	temp -> R16,R17
;	i -> R19
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00B0     {
; 0000 00B1             minute = 0;
;PCODE: $000000FA VOL: 0
; 0000 00B2             hour++;
;PCODE: $000000FB VOL: 0
; 0000 00B3             if (hour >= 24)
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00B4             {
; 0000 00B5                 hour = 0;
;PCODE: $000000FF VOL: 0
; 0000 00B6             }
; 0000 00B7     }
;PCODE: $00000100 VOL: 0
; 0000 00B8     temp = minute;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00B9     for (i = 0; i < 2; i++)
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00BA     {
; 0000 00BB             sevenSegDigit[i] = sevenSegNum[temp % 10];
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00BC             temp /= 10;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00BD     }
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00BE 
; 0000 00BF }
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;
;void hour_def (void)
; 0000 00C2 {
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00C3         unsigned char s = 0;
; 0000 00C4         unsigned int temp2 = 0;
; 0000 00C5         temp2 = hour;
;PCODE: $00000128 VOL: 0
;	s -> R17
;	temp2 -> R18,R19
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00C6         for (s = 2; s < 4; s++)
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00C7         {
; 0000 00C8             sevenSegDigit[s] = sevenSegNum[temp2 % 10];
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00C9             temp2 /= 10;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00CA         }
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00CB }
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;
